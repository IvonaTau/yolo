# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_utils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_utils')
    _utils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        try:
            _mod = imp.load_module('_utils', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _utils.node_val_set
    __swig_getmethods__["val"] = _utils.node_val_get
    if _newclass:
        val = _swig_property(_utils.node_val_get, _utils.node_val_set)
    __swig_setmethods__["next"] = _utils.node_next_set
    __swig_getmethods__["next"] = _utils.node_next_get
    if _newclass:
        next = _swig_property(_utils.node_next_get, _utils.node_next_set)
    __swig_setmethods__["prev"] = _utils.node_prev_set
    __swig_getmethods__["prev"] = _utils.node_prev_get
    if _newclass:
        prev = _swig_property(_utils.node_prev_get, _utils.node_prev_set)

    def __init__(self):
        this = _utils.new_node()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _utils.delete_node
    __del__ = lambda self: None
node_swigregister = _utils.node_swigregister
node_swigregister(node)

class list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _utils.list_size_set
    __swig_getmethods__["size"] = _utils.list_size_get
    if _newclass:
        size = _swig_property(_utils.list_size_get, _utils.list_size_set)
    __swig_setmethods__["front"] = _utils.list_front_set
    __swig_getmethods__["front"] = _utils.list_front_get
    if _newclass:
        front = _swig_property(_utils.list_front_get, _utils.list_front_set)
    __swig_setmethods__["back"] = _utils.list_back_set
    __swig_getmethods__["back"] = _utils.list_back_get
    if _newclass:
        back = _swig_property(_utils.list_back_get, _utils.list_back_set)

    def __init__(self):
        this = _utils.new_list()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _utils.delete_list
    __del__ = lambda self: None
list_swigregister = _utils.list_swigregister
list_swigregister(list)


def make_list():
    return _utils.make_list()
make_list = _utils.make_list

def list_insert(arg1, arg2):
    return _utils.list_insert(arg1, arg2)
list_insert = _utils.list_insert

def list_to_array(l):
    return _utils.list_to_array(l)
list_to_array = _utils.list_to_array

def free_list(l):
    return _utils.free_list(l)
free_list = _utils.free_list

def free_list_contents(l):
    return _utils.free_list_contents(l)
free_list_contents = _utils.free_list_contents

def read_map(filename):
    return _utils.read_map(filename)
read_map = _utils.read_map

def shuffle(arr, n, size):
    return _utils.shuffle(arr, n, size)
shuffle = _utils.shuffle

def sorta_shuffle(arr, n, size, sections):
    return _utils.sorta_shuffle(arr, n, size, sections)
sorta_shuffle = _utils.sorta_shuffle

def free_ptrs(ptrs, n):
    return _utils.free_ptrs(ptrs, n)
free_ptrs = _utils.free_ptrs

def basecfg(cfgfile):
    return _utils.basecfg(cfgfile)
basecfg = _utils.basecfg

def alphanum_to_int(c):
    return _utils.alphanum_to_int(c)
alphanum_to_int = _utils.alphanum_to_int

def int_to_alphanum(i):
    return _utils.int_to_alphanum(i)
int_to_alphanum = _utils.int_to_alphanum

def read_int(fd):
    return _utils.read_int(fd)
read_int = _utils.read_int

def write_int(fd, n):
    return _utils.write_int(fd, n)
write_int = _utils.write_int

def read_all(fd, buffer, bytes):
    return _utils.read_all(fd, buffer, bytes)
read_all = _utils.read_all

def write_all(fd, buffer, bytes):
    return _utils.write_all(fd, buffer, bytes)
write_all = _utils.write_all

def read_all_fail(fd, buffer, bytes):
    return _utils.read_all_fail(fd, buffer, bytes)
read_all_fail = _utils.read_all_fail

def write_all_fail(fd, buffer, bytes):
    return _utils.write_all_fail(fd, buffer, bytes)
write_all_fail = _utils.write_all_fail

def find_replace(str, orig, rep, output):
    return _utils.find_replace(str, orig, rep, output)
find_replace = _utils.find_replace

def error(s):
    return _utils.error(s)
error = _utils.error

def malloc_error():
    return _utils.malloc_error()
malloc_error = _utils.malloc_error

def file_error(s):
    return _utils.file_error(s)
file_error = _utils.file_error

def strip(s):
    return _utils.strip(s)
strip = _utils.strip

def strip_char(s, bad):
    return _utils.strip_char(s, bad)
strip_char = _utils.strip_char

def top_k(a, n, k, index):
    return _utils.top_k(a, n, k, index)
top_k = _utils.top_k

def split_str(s, delim):
    return _utils.split_str(s, delim)
split_str = _utils.split_str

def fgetl(fp):
    return _utils.fgetl(fp)
fgetl = _utils.fgetl

def parse_csv_line(line):
    return _utils.parse_csv_line(line)
parse_csv_line = _utils.parse_csv_line

def copy_string(s):
    return _utils.copy_string(s)
copy_string = _utils.copy_string

def count_fields(line):
    return _utils.count_fields(line)
count_fields = _utils.count_fields

def parse_fields(line, n):
    return _utils.parse_fields(line, n)
parse_fields = _utils.parse_fields

def normalize_array(a, n):
    return _utils.normalize_array(a, n)
normalize_array = _utils.normalize_array

def scale_array(a, n, s):
    return _utils.scale_array(a, n, s)
scale_array = _utils.scale_array

def translate_array(a, n, s):
    return _utils.translate_array(a, n, s)
translate_array = _utils.translate_array

def max_index(a, n):
    return _utils.max_index(a, n)
max_index = _utils.max_index

def constrain(min, max, a):
    return _utils.constrain(min, max, a)
constrain = _utils.constrain

def constrain_int(a, min, max):
    return _utils.constrain_int(a, min, max)
constrain_int = _utils.constrain_int

def mse_array(a, n):
    return _utils.mse_array(a, n)
mse_array = _utils.mse_array

def rand_normal():
    return _utils.rand_normal()
rand_normal = _utils.rand_normal

def rand_size_t():
    return _utils.rand_size_t()
rand_size_t = _utils.rand_size_t

def rand_uniform(min, max):
    return _utils.rand_uniform(min, max)
rand_uniform = _utils.rand_uniform

def rand_scale(s):
    return _utils.rand_scale(s)
rand_scale = _utils.rand_scale

def rand_int(min, max):
    return _utils.rand_int(min, max)
rand_int = _utils.rand_int

def sum_array(a, n):
    return _utils.sum_array(a, n)
sum_array = _utils.sum_array

def mean_array(a, n):
    return _utils.mean_array(a, n)
mean_array = _utils.mean_array

def mean_arrays(a, n, els, avg):
    return _utils.mean_arrays(a, n, els, avg)
mean_arrays = _utils.mean_arrays

def variance_array(a, n):
    return _utils.variance_array(a, n)
variance_array = _utils.variance_array

def mag_array(a, n):
    return _utils.mag_array(a, n)
mag_array = _utils.mag_array

def dist_array(a, b, n, sub):
    return _utils.dist_array(a, b, n, sub)
dist_array = _utils.dist_array

def one_hot_encode(a, n, k):
    return _utils.one_hot_encode(a, n, k)
one_hot_encode = _utils.one_hot_encode

def sec(clocks):
    return _utils.sec(clocks)
sec = _utils.sec

def find_int_arg(argc, argv, arg, arg4):
    return _utils.find_int_arg(argc, argv, arg, arg4)
find_int_arg = _utils.find_int_arg

def find_float_arg(argc, argv, arg, arg4):
    return _utils.find_float_arg(argc, argv, arg, arg4)
find_float_arg = _utils.find_float_arg

def find_arg(argc, argv, arg):
    return _utils.find_arg(argc, argv, arg)
find_arg = _utils.find_arg

def find_char_arg(argc, argv, arg, arg4):
    return _utils.find_char_arg(argc, argv, arg, arg4)
find_char_arg = _utils.find_char_arg

def sample_array(a, n):
    return _utils.sample_array(a, n)
sample_array = _utils.sample_array

def print_statistics(a, n):
    return _utils.print_statistics(a, n)
print_statistics = _utils.print_statistics
# This file is compatible with both classic and new-style classes.


